swagger: "2.0"
info:
  title: Pelican Server APIs
  description:
    "[Pelican](https://pelicanplatform.org/) provides an open-source software platform for federating
    dataset repositories together and delivering the objects to computing capacity such as the [OSPool](https://osg-htc.org/services/open_science_pool.html)


    This is the API documentation for various APIs in Pelican servers (director, registry, origin, etc)
    to communicate with each other and in-between users accessing the servers.


    Note that we use cookie authentication and authorization. We check a cookie named `login` with value being a JWT.
    The cookie is issued after a successful call to `/api/v1.0/auth/login`. However, OpenAPI 2.0 does not support specifying cookie-based security check.
    Therefore, as an alternative, we will add `Authentication Required` to the API description where needed.


    For how to set up Pelican servers, please refer to the documentation at [docs.pelicanplatform.org](https://docs.pelicanplatform.org/)"
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  contact:
    name: API Support via Pelican GitHub Issue
    url: https://github.com/PelicanPlatform/pelican/issues
  version: "1.0"
basePath: /api/v1.0/
consumes:
  - application/json
produces:
  - application/json
schemes:
  - https
securityDefinitions:
  # This is a hacky way to specify Bearer token auth here because it's not actually an "apikey"
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: >-
      Enter the JWT with the `Bearer` prefix, e.g. "Bearer abcde12345".
definitions:
  HealthStatus:
    type: object
    description: The health status of a server component
    properties:
      status:
        type: string
        description: The status of the component, can be one of "unknown", "warning", "ok", and "critical"
        example: warning
      message:
        type: string
        description: Optional message to describe the status
        example: ""
      last_update:
        type: integer
        description: Int64 unix time of the last status update
        example: 1700594867
    readOnly: true
  ErrorModel:
    type: object
    description: The error reponse of a request
    properties:
      error:
        type: string
        description: The detail error message
        example: Bad request
  SuccessModel:
    type: object
    description: The successful reponse of a request
    properties:
      msg:
        type: string
        description: The detail success message
        example: Success
  AdminMetadata:
    type: object
    properties:
      user_id:
        type: string
        description: '"sub" claim of user JWT who requested registration'
      description:
        type: string
      site_name:
        type: string
        description: "Name of the site"
      institution:
        type: string
        description: >
          "Unique identifier of the institution to register to. 
          For Pelican running in OSDF mode, this will be the OSG ID of the institution"
        example: "https://osg-htc.org/iid/01y2jtd41"
      security_contact_user_id:
        type: string
        description: '"sub" claim of user responsible for the security of the service'
      status:
        $ref: "#/definitions/RegistrationStatus"
      approver_id:
        type: string
        description: '"sub" claim of user JWT who approved the service registration'
      approved_at:
        type: string
        format: date-time
        description: "Timestamp of when the registration was approved"
      created_at:
        type: string
        format: date-time
        description: "Timestamp of when the registration was created"
      updated_at:
        type: string
        format: date-time
        description: "Timestamp of the last update"
  AdminMetadataForRegistration:
    type: object
    properties:
      description:
        type: string
      site_name:
        type: string
        description: "Name of the site"
      institution:
        type: string
        description: >
          "Unique identifier of the institution to register to. 
          For Pelican running in OSDF mode, this will be the OSG ID of the institution"
        example: "https://osg-htc.org/iid/01y2jtd41"
      security_contact_user_id:
        type: string
        description: '"sub" claim of user responsible for the security of the service'
  RegistrationStatus:
    type: string
    enum:
      - Pending
      - Approved
      - Denied
      - Unknown
  NamespaceWOPubkey:
    type: object
    properties:
      id:
        type: integer
        description: The ID of the namespace entry
        example: 1
      prefix:
        type: string
        description: The namespace prefix to register. Should be an absolute path.
        example: "/test"
      identity:
        type: string
        description: The user identity we get from CILogon if the namespace is registered via CLI with `--identity` flag
      admin_metadata:
        $ref: "#/definitions/AdminMetadata"
  Institution:
    type: object
    properties:
      id:
        type: string
        description: The unique ID of the institution. For Pelican running in OSDF alias, this will be OSG ID of the institution
        example: https://osg-htc.org/iid/01y2jtd41
      name:
        type: string
        description: The name of the institution
        example: University of Wisconsin - Madison
  Namespace:
    type: object
    properties:
      id:
        type: integer
        description: The ID of the namespace entry
        example: 1
      prefix:
        type: string
        description: The namespace prefix to register. Should be an absolute path.
        example: "/test"
      identity:
        type: string
        description: The user identity we get from CILogon if the namespace is registered via CLI with `--identity` flag
      pubkey:
        type: string
        description:
          The public JWK from the origin that wants to register the namespace.
          It should be a marshalled (stringfied) JSON that contains either one JWK or a JWKS
      admin_metadata:
        $ref: "#/definitions/AdminMetadata"
  NamespaceForRegistration:
    type: object
    properties:
      prefix:
        type: string
        description: The namespace prefix to register. Should be an obsolute paths
        example: "/test"
      pubkey:
        type: string
        description:
          The public JWK from the origin that wants to register the namespace.
          It should be a marshalled (stringfied) JSON that contains either one JWK or a JWKS
      admin_metadata:
        $ref: "#/definitions/AdminMetadataForRegistration"
  RegistrationFieldType:
    type: string
    enum:
      - string
      - int
      - enum
      - datetime
  RegistrationField:
    type: object
    properties:
      name:
        type: string
        description: The name of the field available to register
        example: "prefix"
      type:
        description: The data type of the field
        $ref: "#/definitions/RegistrationFieldType"
      required:
        description: If this field is required for registration
        type: boolean
      options:
        description: The available options if the field is "enum" type
        type: array
        items:
          type: string
          minItems: 0

tags:
  - name: auth
    description: Authentication APIs for all servers
  - name: common
    description: Common APIs for all servers
  - name: registry_ui
    description: APIs for Registry server Web UI
paths:
  /health:
    get:
      tags:
        - common
      summary: Returns the health status of server components
      description: "`Authentication Required`"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
            properties:
              status:
                type: string
                description: The overall health status of the server
              components:
                type: object
                description: The health status of each server components
                properties:
                  cmsd:
                    $ref: "#/definitions/HealthStatus"
                  federation:
                    $ref: "#/definitions/HealthStatus"
                  web-ui:
                    $ref: "#/definitions/HealthStatus"
                  xrootd:
                    $ref: "#/definitions/HealthStatus"
  /config:
    get:
      tags:
        - common
      summary: Return the configuration values of the server and their type
      description: "`Authentication Required`"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
            description: The JSON object output from viper with all config values and their type in the current server
            example:
              ConfigDir:
                Type: "string"
                Value: "/etc/pelican"
              Debug:
                Type: "bool"
                Value: true
              DisableHttpProxy:
                Type: "bool"
                Value: false
              DisableProxyFallback:
                Type: "bool"
                Value: false
              MinimumDownloadSpeed:
                Type: "int"
                Value: 0
              Cache:
                DataLocation:
                  Type: "string"
                  Value: "/run/pelican/xcache"
                EnableVoms:
                  Type: "bool"
                  Value: false
                ExportLocation:
                  Type: "string"
                  Value: "/"
                Port:
                  Type: "int"
                  Value: 8447
                XRootDPrefix:
                  Type: "string"
                  Value: ""
        "401":
          description: Unauthorized
  /servers:
    get:
      tags:
        - common
      summary: Returns a list of enabled servers
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              type: string
              minItems: 1
        "500":
          description: Server encountered error in reading institution configuration
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /auth/login:
    post:
      tags:
        - auth
      summary: Login with username and password to Pelican web UI
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: userCredential
          description: The username and password to authenticate
          schema:
            type: object
            required:
              - user
              - password
            properties:
              user:
                type: string
              password:
                type: string
      responses:
        "200":
          description: Login succeed
          schema:
            type: object
            $ref: "#/definitions/SuccessModel"
        "400":
          description: Invalid request, when username or password is missing
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "401":
          description: Login failed, when username or password doesn't match the record
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /auth/initLogin:
    post:
      tags:
        - auth
      summary: Login with one-time activation code to initialize web UI
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: activationCode
          description: The 6-digit code used to initialize web UI
          schema:
            type: object
            required:
              - code
            properties:
              code:
                type: string
                example: "123456"
      responses:
        "200":
          description: Login succeed
          schema:
            type: object
            $ref: "#/definitions/SuccessModel"
        "400":
          description:
            Invalid request, when authentication is already initialized,
            code-based login is not available, or login code is not provided
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "401":
          description: Login failed, when code is not valid
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /auth/resetLogin:
    post:
      tags:
        - auth
      summary: Reset the password for the user
      description: "`Authentication Required`"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: newPassword
          description: The new password to reset to
          schema:
            type: object
            required:
              - password
            properties:
              password:
                type: string
                description: The new password to reset to
                example: ""
      responses:
        "200":
          description: Reset succeed
          schema:
            type: object
            $ref: "#/definitions/SuccessModel"
        "400":
          description: Invalid request request, when password is missing
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "500":
          description: Server-side error, when failed to write the new password to auth file
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "403":
          description: Unauthorized request, when user is not logged in
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /auth/whoami:
    get:
      tags:
        - auth
      summary: Return the authentication status of the web ui
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
            description:
              The authentication status and username, if any. "user" field is omitted
              when "authenticated" is false
            properties:
              authenticated:
                type: boolean
                example: true
              user:
                type: string
                example: "admin"
          headers:
            X-CSRF-Token:
              description: The CSRF token that user is expected to attach as the request header for any modification requests for registry APIs (PUT/PATCH/DELETE).
              type: string
  /auth/loginInitialized:
    get:
      tags:
        - auth
      summary: Return the status of web UI initialization
      description:
        The initialization depends on if the user has used the one-time activation
        code to set up the password for the admin user
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
            description: The initialization status
            properties:
              initialized:
                type: boolean
                example: true
  /auth/cilogon/login:
    get:
      tags:
        - auth
      summary: Redirect user to CILogon authentication page for OAuth2 third-party login
      parameters:
        - in: query
          name: next_url
          type: string
          description: The path to redirect user to once they successfully authenticated against CILogon
      responses:
        "307":
          description: Redirect user to CILogon authentication page
        "500":
          description: Internal server error when failed to generate CSRF cookie for the OAuth flow
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /auth/cilogon/callback:
    get:
      tags:
        - "auth"
      summary: The callback endpoint CILogon will call once the user has been successfully authenticated
      description: Calling this URL with valid parameters will login the user to Pelican website
      parameters:
        - in: query
          name: state
          type: string
          description: The CSRF token for validation and the next_url for redirect, in the form of `"<[16]byte>:<nextURL>"`
        - in: query
          name: code
          type: string
          description: The access token and refresh token returned from CILogon
      responses:
        "307":
          description: Successfully log the user in, add login cookie, and direct user to `/` if `next_url` is empty; otherwise to `next_url`
        "400":
          description: Invalid request, when `state` or `token` query is invalid
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "500":
          description: Internal server error when process the token and handshake with CILogon
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /registry_ui/namespaces:
    get:
      tags:
        - "registry_ui"
      summary: Return a list of all namespaces in the registry
      description:
        A public API to get all namespaces in the registry. Note that `pubkey` is not included in the return data.


        For unauthenticated users, it only returns a list of approved namespaces.

        For authenticated users, it returns namespaces with any approval status.
      parameters:
        - name: server_type
          in: query
          required: false
          description: The type of server to filter the results. The value can be either `origin` or `cache`
          type: string
        - name: status
          in: query
          required: false
          description:
            The approval status of the namespaces, can be `pending`, `approved`, `denied`, or `unknown`.

            If `status == unknown`, internally it will match any registration with `status == ""` or `stauts == "unknown"`

            For unauthenticated users, filter with `status != approved` will result in a 403 error.
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/NamespaceWOPubkey"
            description: An array of namespaces
        "400":
          description: Invalid request parameters
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "403":
          description: Operation forbidden, when an unauthenticated user trying to filter against `status != approval`
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "500":
          description: Internal server error
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
    options:
      tags:
        - "registry_ui"
      summary: Return a list of field available to register
      description: "`Authentication Required`"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/RegistrationField"
    post:
      tags:
        - "registry_ui"
      summary: Create a new namespace registration
      description: "`Authentication Required`"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: namespace
          description: The namespace data to register
          required: true
          schema:
            $ref: "#/definitions/NamespaceForRegistration"
        - in: header
          name: X-CSRF-Token
          description: The CSRF token for protecting Cross-Site Request Forgery (CSRF) attack. You will get this token by requesting `/api/v1.0/auth/whoami` and read response header `X-CSRF-Token`
          type: string
          required: true
      responses:
        "200":
          description: OK
          schema:
            type: object
            $ref: "#/definitions/SuccessModel"
        "400":
          description: The request data has invalid or missing field value
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "401":
          description: Unauthorized
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "500":
          description: Internal server error
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /registry_ui/namespaces/user:
    get:
      tags:
        - "registry_ui"
      summary: Return a list of namespaces for the currently authenticated user
      description: "`Authentication Required`"
      parameters:
        - name: status
          in: query
          required: false
          description:
            The approval status of the namespaces, can be `pending`, `approved`, `denied`, or `unknown`.

            If `status == unknown`, internally it will match any registration with `status == ""` or `stauts == "unknown"`
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/NamespaceWOPubkey"
            description: An array of namespaces
        "400":
          description: Invalid request parameters
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "500":
          description: Internal server error
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /registry_ui/namespaces/{id}:
    get:
      tags:
        - "registry_ui"
      summary: Return the namespace by `id`
      description: "`Authentication Required`


        For user with admin previlege, it returns for all valid namespace request.


        For general users, it only returns namespace belonging to the user, or it returns 404
        "
      operationId: getNamespaceById
      parameters:
        - name: id
          in: path
          description: ID of the namespace to fetch
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
            $ref: "#/definitions/Namespace"
        "400":
          description: Invalid namespace ID
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "401":
          description: Authentication required to perform this action
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "404":
          description: Namespace not found, either does not exists or the user doesn't have previlege to get it
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "500":
          description: Internal server error
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
    put:
      tags:
        - "registry_ui"
      summary: Update the namespace by `id`
      description: "`Authentication Required`


        For user with admin previlege, they can update any valid namespace.


        For non-admin users, they can only update the namespace belonging to the user, or it returns 404. They also cannot update a namespace if its `admin_metadata.status == approved`.
        "
      operationId: updateNamespaceById
      parameters:
        - name: id
          in: path
          description: ID of the namespace to update
          required: true
          type: integer
        - in: body
          name: namespace
          description: The namespace data to update
          required: true
          schema:
            $ref: "#/definitions/NamespaceForRegistration"
        - in: header
          name: X-CSRF-Token
          description: The CSRF token for protecting Cross-Site Request Forgery (CSRF) attack. You will get this token by requesting `/api/v1.0/auth/whoami` and read response header `X-CSRF-Token`
          type: string
          required: true
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
            $ref: "#/definitions/SuccessModel"
        "400":
          description: Invalid namespace ID
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "401":
          description: Authentication required to perform this action
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "403":
          description: The user does not have previlege to update the namespace
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "404":
          description: Namespace not found because it does not exist
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "500":
          description: Internal server error
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /registry_ui/namespaces/{id}/pubkey:
    get:
      tags:
        - "registry_ui"
      summary: Returns the public key of the namespace by id, in JWK Set format
      description: It returns the JWK set as a downloadable attachement. Refer to https://datatracker.ietf.org/doc/html/rfc7517#section-5 for the format of JWK set
      operationId: getNamespacePubkeyById
      parameters:
        - name: id
          in: path
          description: ID of the namespace to get public key
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK, an attachement is returned to download
          schema:
            type: object
        "400":
          description: Invalid namespace ID
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "404":
          description: Namespace not found, either does not exist or the user doesn't have previlege to get it
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "500":
          description: Internal server error
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /registry_ui/namespaces/{id}/approve:
    patch:
      tags:
        - "registry_ui"
      summary: Update namespace status to "approved"
      description: "`Authentication Required`


        Update namespace status to `approved` by namespace `id`.


        This action requires admin previlege to perform.
        "
      parameters:
        - name: id
          in: path
          description: ID of the namespace to update status
          required: true
          type: integer
        - in: header
          name: X-CSRF-Token
          description: The CSRF token for protecting Cross-Site Request Forgery (CSRF) attack. You will get this token by requesting `/api/v1.0/auth/whoami` and read response header `X-CSRF-Token`
          type: string
          required: true
      produces:
        - application/json
      responses:
        "200":
          description: Success
          schema:
            type: object
            $ref: "#/definitions/SuccessModel"
        "400":
          description: Invalid namespace ID
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "401":
          description: Authentication required to perform this action
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "403":
          description: The user does not have previlege to update the namespace status
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "404":
          description: Namespace not found because it does not exist
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "500":
          description: Internal server error
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /registry_ui/namespaces/{id}/deny:
    patch:
      tags:
        - "registry_ui"
      summary: Update namespace status to "denied"
      description: "`Authentication Required`


        Update namespace status to `denied` by namespace `id`.


        This action requires admin previlege to perform.
        "
      parameters:
        - name: id
          in: path
          description: ID of the namespace to update status
          required: true
          type: integer
        - in: header
          name: X-CSRF-Token
          description: The CSRF token for protecting Cross-Site Request Forgery (CSRF) attack. You will get this token by requesting `/api/v1.0/auth/whoami` and read response header `X-CSRF-Token`
          type: string
          required: true
      produces:
        - application/json
      responses:
        "200":
          description: Success
          schema:
            type: object
            $ref: "#/definitions/SuccessModel"
        "400":
          description: Invalid namespace ID
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "401":
          description: Authentication required to perform this action
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "403":
          description: The user does not have previlege to update the namespace status
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "404":
          description: Namespace not found because it does not exist
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "500":
          description: Internal server error
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
  /registry_ui/institutions:
    get:
      tags:
        - "registry_ui"
      summary: Returns a list of institution names available for user to select for namespace registration
      description: "`Authentication Required`"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              type: object
              $ref: "#/definitions/Institution"
              minItems: 0
        "401":
          description: Authentication required to perform this action
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
        "500":
          description: Server didn't configure `Registry.Institutions` or server encountered error in reading institution configuration
          schema:
            type: object
            $ref: "#/definitions/ErrorModel"
