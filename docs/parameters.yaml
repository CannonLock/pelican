#
# Copyright (C) 2023, Pelican Project, Morgridge Institute for Research
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License.  You may
# obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This file contains structured documentation about the Pelican parameters.
# While it is somewhat human-readable, it is meant to help with the documentation
# generation.

############################
#     Top-Level Configs    #
############################
---
name: ConfigBase
description: >-
  The directory containing the Pelican configurations and data when the utility
  is run as non-root.  Automatically configured; cannot be overridden.
default: "~/.config/pelican"
components: ["*"]
type: filename
---
name: Debug
description: >-
  A bool indicating whether Pelican should emit debug messages in its log.
type: bool
default: false
components: ["*"]
---
name: TLSSkipVerify
description: >-
  When set to true, Pelican will skip TLS verification.  This allows a "man in the middle" attack on the connection but can simplify testing.  Intended for developers.
type: bool
default: false
components: ["origin", "nsregistry", "director"]
---
name: IssuerKey
description: >-
  The name of the file containing a service's private `issuer.jwk` key.
type: filename
root_default: /etc/pelican/issuer.jwk
default: $ConfigBase/issuer.jwk
components: ["client", "nsregistry", "director"]
---
name: Transport.DialerTimeout
description: >-
  Maximum time allowed for establishing a connection to target host.
type: duration
default: 10s
components: ["client", "nsregistry", "origin"]
---
name: Transport.DialerKeepAlive
description: >-
  Maximum time a TCP connection should be kept alive without any activity.
type: duration
default: 30s
components: ["client", "nsregistry", "origin"]
---
name: Transport.MaxIdleConns
description: >-
  Maximum number of idle connections that the HTTP client should maintain in its connection pool.
type: int
default: 30
components: ["client", "nsregistry", "origin"]
---
name: Transport.IdleConnTimeout
description: >-
  Maximum duration an idle connection should remain open in the connection pool.
type: duration
default: 90s
components: ["client", "nsregistry", "origin"]
---
name: Transport.TLSHandshakeTimeout
description: >-
  Maximum time allowed for the TLS handshake to complete when making an HTTPS connection
type: duration
default: 15s
components: ["client", "nsregistry", "origin"]
---
name: Transport.ExpectContinueTimeout
description: >-
  Timeout to control how long the client should wait for the "Expect: 100-continue" response from the server before sending the request
  body.
type: duration
default: 1s
components: ["client", "nsregistry", "origin"]
---
name: Transport.ResponseHeaderTimeout
description: >-
  Maximum time the client should wait for the response headers to be received from the server
type: duration
default: 10s
components: ["client", "nsregistry", "origin"]
---

############################
#     Log-Level Configs    #
############################
name: Logging.Level
description: >-
  A string defining the log level of the client. Options include (going from most info to least): Trace, Debug, Info, Warn, Error, Fatal, Panic.
type: string
default: Error
components: ["*"]
---
name: Logging.LogLocation
description: >-
  A filename defining a file to write log outputs to, if the user desires.
type: filename
default: none
components: ["*"]
---

############################
# Federation-Level Configs #
############################
name: Federation.DiscoveryUrl
description: >-
  A URL pointing to the federation's metadata discovery host.
type: url
default: none
components: ["*"]
---
name: Federation.TopologyNamespaceUrl
description: >-
  A URL containing namespace information for origins and caches configured via the OSG Topology application (a legacy integration). The URL
  should point to the hosted namespace.json.
type: url
osdf_default: https://topology.opensciencegrid.org/stashcache/namespaces.json
default: none
components: ["director"]
---
name: Federation.DirectorUrl
description: >-
  A URL indicating where a director service is hosted.
type: url
osdf_default: Default is determined dynamically through metadata at <federation URL>/.well-known/pelican-configuration
default: none
components: ["client", "origin"]
---
name: Federation.NamespaceUrl
description: >-
  A URL indicating where the namespace registry service is hosted.
type: url
osdf_default: Default is determined dynamically through metadata at <federation URL>/.well-known/pelican-configuration
default: none
components: ["client", "director", "origin"]
---
name: Federation.JwkUrl
description: >-
  A URL indicating where the JWKS for the Federation is hosted.
type: url
osdf_default: Default is determined dynamically through metadata at <federtion URL>/.well-known/pelican-configuration
default: none
components: ["client", "origin"]
---

############################
#   Client-Level Configs   #
############################
name: Client.StoppedTransferTimeout
description: >-
  A timeout indicating when a "stopped transfer" event should be triggered.
type: int
default: 100
components: ["client"]
---
name: Client.SlowTransferRampupTime
description: >-
  A duration indicating the rampup period for a slow transfer.
type: int
default: 30
components: ["client"]
---
name: Client.SlowTransferWindow
description: >-
  A duration indicating the sliding window over which to consider transfer speeds for slow transfers.
type: int
default: 30
components: ["client"]
---
name: Client.DisableHttpProxy
description: >-
  A bool indicating whether the client's HTTP proxy should be disabled.
type: bool
default: false
components: ["client"]
---
name: DisableHttpProxy
description: >-
  A legacy configuration for disabling the client's HTTP proxy. See Client.DisableHttpProxy for new config.
type: bool
default: false
components: ["client"]
---
name: Client.DisableProxyFallback
description: >-
  A bool indicating whether the a proxy fallback should be used by the client.
type: bool
default: false
components: ["client"]
---
name: DisableProxyFallback
description: >-
  A legacy configuration for disabling the client's proxy fallback. See Client.DisableProxyFallback for new config.
type: bool
default: false
components: ["client"]
---
name: Client.MinimumDownloadSpeed
description: >-
  The minimum speed allowed for a client download before an error is thrown.
type: int
default: 102400
components: ["client"]
---
name: MinimumDownloadSpeed
description: >-
  A legacy configuration for setting the client's minimum download speed. See Client.MinimumDownloadSpeed for new config.
type: int
default: 102400
components: ["client"]
---

############################
#   Origin-level Configs   #
############################
name: Origin.Url
description: >-
  The origin's configured URL, as reported to XRootD.
type: string
default: Hostname
components: ["origin"]
---
name: Origin.ExportVolume
description: >-
  A path to the volume exported by an origin.
type: string
default: none
components: ["origin"]
---
name: Origin.NamespacePrefix
description: >-
  The filepath prefix at which an origin's contents are made globally available, eg /pelican/PUBLIC.
type: string
default: none
components: ["origin"]
---
name: Origin.Multiuser
description: >-
  A bool indicating whether an origin is "multiuser", ie whether the underlying XRootD instance must be configured in multi user mode.
type: bool
root_default: true
default: false
components: ["origin"]
---
name: Origin.EnableCmsd
description: >-
  A bool indicating whether the origin should enable the `cmsd` daemon.
type: bool
default: true
components: ["origin"]
---
name: Origin.UIPasswordFile
description: >-
  A filepath specifying where the Origin UI password file should be stored.
type: string
default: $ConfigBase/origin-ui-passwd
components: ["origin"]
---
name: Origin.UIActivationCodeFile
description: >-
  If the origin's web user interface has not yet been configured, this file will
  contain the activation code necessary to turn it on.
type: string
default: $ConfigBase/origin-activation-code
components: ["origin"]
---
name: Origin.SelfTest
description: >-
  A bool indicating whether the origin should perform self health checks.
type: bool
default: true
components: ["origin"]
---
name: Origin.EnableUI
description: >-
  Indicate whether the origin should enable its web UI.
type: bool
default: true
components: ["origin"]
---
name: Origin.EnableIssuer
description: >-
  Enable the built-in issuer daemon for the origin.
type: bool
default: false
components: ["origin"]
---
name: Origin.ScitokensRestrictedPaths
description: >-
  Enable the built-in issuer daemon for the origin.
type: stringSlice
default: none
components: ["origin"]
---
name: Origin.ScitokensMapSubject
description: >-
  Enable the built-in issuer daemon for the origin.
type: bool
default: false
components: ["origin"]
---
name: Origin.ScitokensDefaultUser
description: >-
  Enable the built-in issuer daemon for the origin.
type: string
default: none
components: ["origin"]
---
name: Origin.ScitokensUsernameClaim
description: >-
  Enable the built-in issuer daemon for the origin.
type: string
default: none
components: ["origin"]
---
name: Origin.ScitokensNameMapFile
description: >-
  Enable the built-in issuer daemon for the origin.
type: string
default: none
components: ["origin"]
---

############################
#   Cache-level configs    #
############################
name: Cache.DataLocation
description: >-
  The directory for the location of the cache data files - this is where the actual data in the cache is stored.
  This should *not* be in the same path as XRootD.Mount or else it will expose the data files as part of the files within the cache.
type: string
root_default: /run/pelican/xcache
default: $XDG_RUNTIME_DIR/pelican/xcache
components: ["cache"]
---
name: Cache.ExportLocation
description: >-
  The location of the export directory. Everything under this directory will be exposed as part of the cache. This is
  relative to the mount location.
type: string
default: /
components: ["cache"]
---

############################
#  Director-level configs  #
############################
name: Director.DefaultResponse
description: >-
  The default response type of a redirect for a director instance. Can be either "cache" or "origin". If a director
  is hosted at https://director.com, then a GET request to https://director.com/foo/bar.txt will either redirect to
  the nearest cache for namespace /foo if Director.DefaultResponse is set to "cache" or to the origin for /foo if
  it is set to "origin".
type: string
default: cache
components: ["director"]
---
name: Director.CacheResponseHostnames
description: >-
  A list of virtual hostnames for the director. If a request is sent by the client to one of these hostnames,
  the director assumes it should respond with a redirect to a cache.

  If present, the hostname is taken from the X-Forwarded-Host header in the request. Otherwise, Host is used.
type: stringSlice
default: none
components: ["director"]
---
name: Director.OriginResponseHostnames
description: >-
  A list of virtual hostnames for the director. If a request is sent by the client to one of these hostnames,
  the director assumes it should respond with a redirect to an origin.

  If present, the hostname is taken from the X-Forwarded-Host header in the request. Otherwise, Host is used.
type: stringSlice
default: none
components: ["director"]
---
name: Director.MaxMindKeyFile
description: >-
  A filepath to a MaxMind API key. The director service uses the MaxMind GeoLite City database (available [here](https://dev.maxmind.com/geoip/docs/databases/city-and-country))
  to determine which cache is nearest to a client's IP address. The database, if not already found, will be downloaded
  automatically when a director is served and a valid key is present.
type: url
default: none
components: ["director"]
---
name: Director.GeoIPLocation
description: >-
  A filepath to the intended location of the MaxMind GeoLite City database. This option can be used either to load
  an existing database, or to configure the preferred download location if Pelican has a MaxMind API key.
type: filename
root_default: /var/cache/pelican/maxmind/GeoLite2-City.mmdb
default: $ConfigBase/maxmind/GeoLite2-city.mmdb
components: ["director"]
---

############################
#  Registry-level configs  #
############################
name: Registry.DbLocation
description: >-
  A filepath to the intended location of the namespace registry's database.
type: filename
root_default: /var/lib/pelican/registry.sqlite
default: $ConfigBase/ns-registry.sqlite
components: ["nsregistry"]
---

############################
#   Server-level configs   #
############################
name: Server.TLSCertificate
description: >-
  The name of a file containing an X.509 host certificate to use for TLS
  authentication when running server components of Pelican.
type: filename
root_default: /etc/pelican/certificates/tls.crt
default: "$ConfigBase/certificates/tls.crt"
components: ["origin", "nsregistry", "director"]
---
name: Server.TLSCACertificateFile
description: >-
  A filepath for a TLS certificate to be used by XRootD.
type: string
default: /etc/pki/tls/cert.pem
components: ["origin"]
---
name: Server.TLSCACertificateDirectory
description: >-
  A filepath to the directory used for storing TLS certificates
type: filename
default: /etc/pki/tls/
components: ["origin"]
---
name: Server.TLSCAKey
description: >-
  The name of a file containing a private key corresponding to the TLSCACertificate.
  Used when running server components of Pelican.
type: filename
root_default: /etc/pelican/certificates/tlsca.key
default: "$ConfigBase/certificates/tlsca.key"
components: ["origin", "nsregistry", "director"]
---
name: Server.TLSKey
description: >-
  The name of a file containing a private key corresponding to the TLSCertificate.
  Used when running server components of Pelican.
type: filename
root_default: /etc/pelican/certificates/tls.key
default: "$ConfigBase/certificates/tls.key"
components: ["origin", "nsregistry", "director"]
---
name: Server.Port
description: >-
  The port number the Pelican web interface will be bound to.
type: int
default: 8444
components: ["nsregistry", "director", "origin"]
---
name: Server.Address
description: >-
  A string-encoded IP address that the origin is configured to listen on.
type: string
default: 0.0.0.0
components: ["origin"]
---
name: Server.ExternalAddress
description: >-
  A URL indicating the server's address as it appears externally.
type: url
default: none
components: ["origin", "director", "nsregistry"]
---
name: Server.Hostname
description: >-
  The server's hostname
type: url
default: none
components: ["origin", "director", "nsregistry"]
---
name: Server.IssuerJwks
description: >-
  A filepath indicating where the server's public JSON web keyset can be found.
type: string
default: none
components: ["origin", "director", "nsregistry"]
---


################################
#   Issuer's Configurations    #
################################
name: Issuer.TomcatLocation
description: >-
  Location of the system tomcat installation
type: string
default: /opt/tomcat
components: ["origin"]
---
name: Issuer.ScitokensServerLocation
description: >-
  Location of the scitoken server installation
type: string
default: /opt/scitokens-server
components: ["origin"]
---


###################################
#   Server's OIDC Configuration   #
###################################
name: OIDC.ClientIDFile
description: >-
  A filepath to a file containing an OIDC Client ID. This is used by the namespace registry to establish OIDC information
  for authenticated registration.
type: filename
root_default: /etc/pelican/oidc-client-id
default: $ConfigBase/oidc-client-id
components: ["nsregistry"]
---
name: OIDC.ClientSecretFile
description: >-
  A filepath to a file containing an OIDC Client Secret. This is used by the namespace registry to establish OIDC information
  for authenticated registration.
type: filename
root_default: /etc/pelican/oidc-client-secret
default: $ConfigBase/oidc-client-secret
components: ["nsregistry"]
---
name: OIDC.DeviceAuthEndpoint
description: >-
  A URL describing an OIDC Device Auth Endpoint. This is used by the namespace registry to establish OIDC information
  for authenticated registration.
type: url
default: none
components: ["nsregistry"]
---
name: OIDC.TokenEndpoint
description: >-
  A URL describing an OIDC Token Endpoint. This is used by the namespace registry to establish OIDC information
  for authenticated registration.
type: url
default: none
components: ["nsregistry"]
---
name: OIDC.UserInfoEndpoint
description: >-
  A URL describing an OIDC User Info Endpoint. This is used by the namespace registry to establish OIDC information
  for authenticated registration.
type: url
default: none
components: ["nsregistry"]
---


############################
#   XRootD-level Configs   #
############################
name: Xrootd.Port
description: >-
  The port over which XRootD should be made available.
type: int
default: 8443
components: ["origin"]
---
name: Xrootd.RunLocation
description: >-
  A directory where temporary configurations will be stored for the xrootd daemon
  started by the origin.

  For non-root servers, if $XDG_RUNTIME_DIR is not set, a temporary directory will
  be created (and removed on shutdown)
type: filename
root_default: /run/pelican/xrootd
default: $XDG_RUNTIME_DIR/pelican
components: ["origin"]
---
name: Xrootd.RobotsTxtFile
description: >-
  Origins may be indexed by web search engines; to control the behavior of search
  engines, one may provide local policy via a [robots.txt file](https://en.wikipedia.org/wiki/Robots.txt).

  If this file is not present, it will be auto-created with a default policy of
  blocking all indexing.
type: filename
root_default: /etc/pelican/robots.txt
default: $ConfigBase/robots.txt
components: ["origin"]
---
name: Xrootd.ScitokensConfig
description: >-
  The location of a file configuring xrootd's
  [token-based authorization subsystem](https://github.com/xrootd/xrootd/blob/master/src/XrdSciTokens/README.md).
  This file allows arbitrary changes to the authorization configuration and will be merged with any
  auto-generated configuration; it's recommended for use by experts only.
type: filename
root_default: /etc/pelican/xrootd/scitokens.cfg
default: $ConfigBase/xrootd/scitokens.cfg
---
name: Xrootd.Mount
description: >-
  The mount path for an instance of XRootD.
type: string
default: none
components: ["origin"]
---
name: Xrootd.MacaroonsKeyFile
description: >-
  The filepath to a Macaroons key for setting up authorization in XRootD.
type: string
default: none
components: ["origin"]
---
name: Xrootd.Authfile
description: >-
  The filepath to an auth file for setting up authorization in XRootD.
type: string
default: none
components: ["origin"]
---
name: Xrootd.ManagerHost
description: >-
  A URL pointing toward the XRootD instance's Manager Host.
type: url
default: none
components: ["origin"]
---
name: Xrootd.SummaryMonitoringHost
description: >-
  A URL pointing toward the XRootD instance's Summary Monitoring Host.
type: url
default: none
components: ["origin"]
---
name: Xrootd.DetailedMonitoringHost
description: >-
  A URL pointing toward the XRootD instance's Detailed Monitoring Host.
type: url
default: none
components: ["origin"]
---
name: Xrootd.LocalMonitoringHost
description: >-
  A URL pointing toward the XRootD instance's Local Monitoring Host.
type: url
default: none
components: ["origin"]
---
name: Xrootd.Sitename
description: >-
  The sitename, as configured for XRootD.
type: string
default: none
components: ["origin"]
---

############################
# Monitoring-level configs #
############################
name: Monitoring.DataLocation
description: >-
  A filepath where Prometheus should host its monitoring data.
type: string
root_default: /var/lib/pelican/monitoring/data
default: $ConfigBase/monitoring/data
components: ["origin"]
---
name: Monitoring.PortLower
description: >-
  The lower end of a range of monitoring ports for Prometheus configuration.
type: int
default: 9930
components: ["origin"]
---
name: Monitoring.PortHigher
description: >-
  The lower end of a range of monitoring ports for Prometheus configuration.
type: int
default: 9999
components: ["origin"]
---

############################
#   Plugin-level configs   #
############################
name: Plugin.Token
description: >-
  The specified token for pelican plugin staging
type: string
default: none
components: ["plugin"]
---
name: StagePlugin.Hook
description: >-
  Flag to specify HTCondor hook behavior
type: bool
default: false
components: ["plugin"]
---
name: StagePlugin.MountPrefix
description: >-
  Prefix corresponding to the local mount point of the origin
type: string
default: none
components: ["plugin"]
---
name: StagePlugin.OriginPrefix
description: >-
  Prefix corresponding to the local origin
type: string
default: none
components: ["plugin"]
---
name: StagePlugin.ShadowOriginPrefix
description: >-
  Prefix corresponding to the shadow origin
type: string
default: none
components: ["plugin"]
